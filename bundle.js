/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ (() => {

eval("class DataRetriever {\r\n    constructor() {\r\n        this.challenges = null\r\n    }\r\n    async load() {\r\n        const url = 'https://lernia-sjj-assignments.vercel.app/api/challenges';\r\n        if(!this.challenges) {\r\n            try {\r\n                const response = await fetch(url);\r\n                const data = await response.json();\r\n                this.challenges = data.challenges\r\n            } catch (error) {\r\n                console.log(error)\r\n            }    \r\n        }\r\n\r\n        return this.challenges;\r\n    }\r\n}\r\n\r\nclass Challenge {\r\n    constructor(data) {\r\n        this.title = data.title;\r\n        this.rating = data.rating;\r\n        this.image = data.image;\r\n        this.description = data.description;\r\n        this.minParticipants = data.minParticipants;\r\n        this.maxParticipants = data.maxParticipants;\r\n    }\r\n\r\n    render() {\r\n        // Create elements for challenge card\r\n        let challengesItem = document.createElement('li');\r\n        challengesItem.classList.add('challenges-item');\r\n        \r\n        let challengesPicture = document.createElement('img')\r\n        challengesPicture.classList.add('challenge-picture');\r\n        challengesPicture.src=this.image;\r\n\r\n        let challengeTitle = document.createElement('h3');\r\n        challengeTitle.classList.add('challenge-title');\r\n        challengeTitle.innerHTML = this.title;\r\n\r\n        let challengeMeta = document.createElement('div');\r\n        challengeMeta.classList.add('challenge-meta');\r\n\r\n        let challengeRating = document.createElement('ul');\r\n        challengeRating.classList.add('challenge-rating');\r\n\r\n        // Create elements for rating stars\r\n        for(let i = 0; i < Math.floor(this.rating); i++) {\r\n            let challengeRatingStar = document.createElement('li');\r\n            challengeRatingStar.classList.add('challenge-rating-star');\r\n            challengeRatingStar.classList.add('on');\r\n            challengeRating.appendChild(challengeRatingStar);\r\n    \r\n        };\r\n\r\n        for(let i = Math.floor(this.rating); i < 5; i++) {\r\n            let challengeRatingStar = document.createElement('li');\r\n            challengeRatingStar.classList.add('challenge-rating-star');\r\n            challengeRatingStar.classList.add('off');\r\n            challengeRating.appendChild(challengeRatingStar);\r\n        };\r\n\r\n        let challengeSize = document.createElement('small');\r\n        challengeSize.classList.add('challenge-size');\r\n        challengeSize.innerHTML = `${this.minParticipants}-${this.maxParticipants} participants`;\r\n\r\n        let challengeDescription = document.createElement('p');\r\n        challengeDescription.classList.add('challenge-description');\r\n        challengeDescription.innerHTML = this.description\r\n\r\n        let challengeCta = document.createElement('a');\r\n        challengeCta.classList.add('challenge-cta');\r\n        challengeCta.innerHTML = \"Book the room\";\r\n\r\n        // Render/append on site\r\n        challengesItem.appendChild(challengesPicture);\r\n        challengesItem.appendChild(challengeTitle);\r\n        challengesItem.appendChild(challengeMeta)\r\n        challengeMeta.appendChild(challengeRating);\r\n        challengeMeta.appendChild(challengeSize);\r\n        challengesItem.appendChild(challengeDescription);\r\n        challengesItem.appendChild(challengeCta);\r\n\r\n        return challengesItem;\r\n    }\r\n}\r\n\r\nclass ChallengeGrid {\r\n    constructor(retriever, container, filter) {\r\n        this.retriever = retriever;\r\n        this.container = container;\r\n        this.filter = filter;\r\n        this.challengeItems = [];\r\n        this.filters = {\r\n            byOnline: true,\r\n            byOnsite: true,\r\n            byLabel: false,\r\n            byRating: false,\r\n            byText: false,\r\n            labelsFilters: [],\r\n            minRatingFilter: 2,\r\n            maxRatingFilter: 5,\r\n            textFilter: ''\r\n        };\r\n    }\r\n\r\n    async run() {\r\n        this.challenges = await this.retriever.load();\r\n        \r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        const filterInstance = new Filter(this.filters);\r\n        const challengeArray = filterInstance.filterArray(this.challenges)\r\n        challengeArray.forEach(challengeData => {\r\n        const challengeInstance = new Challenge(challengeData);\r\n        const challengeItem = challengeInstance.render();\r\n        this.container.appendChild(challengeItem);\r\n        this.challengeItems.push(challengeData);\r\n        })\r\n\r\n        // Filter by text or char on desription and title\r\n        const filterTextBar = document.querySelector('.filterTextBar');\r\n        filterTextBar.addEventListener('keyup', () => {\r\n            this.filters.byText = true;\r\n            this.filters.textFilter = filterTextBar.value;\r\n            console.log(this.filters.textFilter)\r\n            this.rerender()\r\n        })\r\n        \r\n    }\r\n    rerender() {\r\n        this.container.innerHTML = '';\r\n\r\n        const filterInstance = new Filter(this.filters);\r\n        const challengeArray = filterInstance.filterArray(this.challengeItems)\r\n        challengeArray.forEach(challengeData => {\r\n        const challengeInstance = new Challenge(challengeData);\r\n        const challengeItem = challengeInstance.render()\r\n        this.container.appendChild(challengeItem)\r\n            \r\n        })\r\n    }\r\n}\r\n\r\nclass Filter {\r\n    constructor(filtersObj) {\r\n        this.filters = filtersObj\r\n    }\r\n    filterArray(array) {\r\n        let newArray = [];\r\n        let filteredArray = [];\r\n        \r\n        if (this.filters.byOnline) {\r\n            filteredArray = array.filter(obj => {\r\n                return obj.type === 'online';\r\n            })\r\n            // Using spread to \"create\"/concat a new array with all values\r\n            newArray = [...newArray, ...filteredArray];\r\n        }\r\n    \r\n        if (this.filters.byOnsite) {\r\n            filteredArray = array.filter(obj => {\r\n                return obj.type === 'onsite';\r\n            })\r\n            // Using spread to \"create\"/concat a new array with all values\r\n            newArray = [...newArray, ...filteredArray];\r\n        }\r\n    \r\n        if (this.filters.byLabel) {\r\n            newArray = newArray.filter(obj => {\r\n                for(let i = 0; i < labelsFilters.length; i++) {\r\n                    return obj.labels.includes(this.labelsFilters[i]);\r\n                }\r\n            })\r\n        }\r\n    \r\n        if (this.filters.byRating) {\r\n            newArray = newArray.filter(obj => {\r\n                if(obj.rating >= this.filters.minRatingFilter && obj.rating <= this.filters.maxRatingFilter) {\r\n                    return obj;\r\n                }\r\n            });\r\n        }\r\n    \r\n        if (filters.byText) {\r\n            newArray = newArray.filter(obj => {\r\n                // returns obj with title or description that includes the value from textFilter\r\n                return obj.description.toUpperCase().includes(this.filters.textFilter.toUpperCase()) || obj.title.toUpperCase().includes(this.filters.textFilter.toUpperCase());\r\n            });\r\n        }\r\n    \r\n        console.log(newArray);\r\n        return newArray;    \r\n    }\r\n}\r\n\r\n// Filters obj\r\nlet filters = {\r\n    byOnline: true,\r\n    byOnsite: true,\r\n    byLabel: false,\r\n    byRating: false,\r\n    byText: true,\r\n    labelsFilters: [],\r\n    minRatingFilter: 2,\r\n    maxRatingFilter: 5,\r\n    textFilter: ''\r\n};\r\n\r\n// Filter variables\r\nlet labelsFilters = ['bash'];\r\nlet minRatingFilter = 2;\r\nlet maxRatingFilter = 5;\r\nlet textFilter = 'go';\r\n\r\nlet filterArray = function (array) {\r\n\r\n    let newArray = [];\r\n    let filteredArray = [];\r\n    \r\n    if (filters.byOnline) {\r\n        filteredArray = array.filter(obj => {\r\n            return obj.type === 'online';\r\n        })\r\n        // Using spread to \"create\"/concat a new array with all values\r\n        newArray = [...newArray, ...filteredArray];\r\n    }\r\n\r\n    if (filters.byOnsite) {\r\n        filteredArray = array.filter(obj => {\r\n            return obj.type === 'onsite';\r\n        })\r\n        // Using spread to \"create\"/concat a new array with all values\r\n        newArray = [...newArray, ...filteredArray];\r\n    }\r\n\r\n    if (filters.byLabel) {\r\n        newArray = newArray.filter(obj => {\r\n            for(let i = 0; i < labelsFilters.length; i++) {\r\n                return obj.labels.includes(labelsFilters[i]);\r\n            }\r\n        })\r\n    }\r\n\r\n    if (filters.byRating) {\r\n        newArray = newArray.filter(obj => {\r\n            if(obj.rating >= minRatingFilter && obj.rating <= maxRatingFilter) {\r\n                return obj;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (filters.byText) {\r\n        newArray = newArray.filter(obj => {\r\n            // returns obj with title or description that includes the value from textFilter\r\n            return obj.description.toUpperCase().includes(textFilter.toUpperCase()) || obj.title.toUpperCase().includes(textFilter.toUpperCase());\r\n        });\r\n    }\r\n\r\n    console.log(newArray);\r\n    return newArray;\r\n};\r\n\r\n\r\nconst container = document.querySelector('.challenges-list');\r\nconst retriever = new DataRetriever();\r\nconst filter = new Filter()\r\n\r\nconst grid = new ChallengeGrid(retriever, container, filter);\r\n\r\ngrid.run()\n\n//# sourceURL=webpack://02-esc-website/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/main.js"]();
/******/ 	
/******/ })()
;